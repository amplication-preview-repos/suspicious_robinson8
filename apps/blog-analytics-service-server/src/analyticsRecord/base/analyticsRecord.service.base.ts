/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AnalyticsRecord as PrismaAnalyticsRecord,
} from "@prisma/client";

export class AnalyticsRecordServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AnalyticsRecordCountArgs, "select">
  ): Promise<number> {
    return this.prisma.analyticsRecord.count(args);
  }

  async analyticsRecords(
    args: Prisma.AnalyticsRecordFindManyArgs
  ): Promise<PrismaAnalyticsRecord[]> {
    return this.prisma.analyticsRecord.findMany(args);
  }
  async analyticsRecord(
    args: Prisma.AnalyticsRecordFindUniqueArgs
  ): Promise<PrismaAnalyticsRecord | null> {
    return this.prisma.analyticsRecord.findUnique(args);
  }
  async createAnalyticsRecord(
    args: Prisma.AnalyticsRecordCreateArgs
  ): Promise<PrismaAnalyticsRecord> {
    return this.prisma.analyticsRecord.create(args);
  }
  async updateAnalyticsRecord(
    args: Prisma.AnalyticsRecordUpdateArgs
  ): Promise<PrismaAnalyticsRecord> {
    return this.prisma.analyticsRecord.update(args);
  }
  async deleteAnalyticsRecord(
    args: Prisma.AnalyticsRecordDeleteArgs
  ): Promise<PrismaAnalyticsRecord> {
    return this.prisma.analyticsRecord.delete(args);
  }
}
