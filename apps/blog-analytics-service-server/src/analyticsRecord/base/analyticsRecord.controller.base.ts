/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AnalyticsRecordService } from "../analyticsRecord.service";
import { AnalyticsRecordCreateInput } from "./AnalyticsRecordCreateInput";
import { AnalyticsRecord } from "./AnalyticsRecord";
import { AnalyticsRecordFindManyArgs } from "./AnalyticsRecordFindManyArgs";
import { AnalyticsRecordWhereUniqueInput } from "./AnalyticsRecordWhereUniqueInput";
import { AnalyticsRecordUpdateInput } from "./AnalyticsRecordUpdateInput";

export class AnalyticsRecordControllerBase {
  constructor(protected readonly service: AnalyticsRecordService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AnalyticsRecord })
  async createAnalyticsRecord(
    @common.Body() data: AnalyticsRecordCreateInput
  ): Promise<AnalyticsRecord> {
    return await this.service.createAnalyticsRecord({
      data: data,
      select: {
        createdAt: true,
        id: true,
        likes: true,
        postId: true,
        updatedAt: true,
        views: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AnalyticsRecord] })
  @ApiNestedQuery(AnalyticsRecordFindManyArgs)
  async analyticsRecords(
    @common.Req() request: Request
  ): Promise<AnalyticsRecord[]> {
    const args = plainToClass(AnalyticsRecordFindManyArgs, request.query);
    return this.service.analyticsRecords({
      ...args,
      select: {
        createdAt: true,
        id: true,
        likes: true,
        postId: true,
        updatedAt: true,
        views: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AnalyticsRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async analyticsRecord(
    @common.Param() params: AnalyticsRecordWhereUniqueInput
  ): Promise<AnalyticsRecord | null> {
    const result = await this.service.analyticsRecord({
      where: params,
      select: {
        createdAt: true,
        id: true,
        likes: true,
        postId: true,
        updatedAt: true,
        views: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AnalyticsRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAnalyticsRecord(
    @common.Param() params: AnalyticsRecordWhereUniqueInput,
    @common.Body() data: AnalyticsRecordUpdateInput
  ): Promise<AnalyticsRecord | null> {
    try {
      return await this.service.updateAnalyticsRecord({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          likes: true,
          postId: true,
          updatedAt: true,
          views: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AnalyticsRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAnalyticsRecord(
    @common.Param() params: AnalyticsRecordWhereUniqueInput
  ): Promise<AnalyticsRecord | null> {
    try {
      return await this.service.deleteAnalyticsRecord({
        where: params,
        select: {
          createdAt: true,
          id: true,
          likes: true,
          postId: true,
          updatedAt: true,
          views: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
