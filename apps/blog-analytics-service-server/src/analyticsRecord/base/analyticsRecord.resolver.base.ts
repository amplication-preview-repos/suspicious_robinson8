/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AnalyticsRecord } from "./AnalyticsRecord";
import { AnalyticsRecordCountArgs } from "./AnalyticsRecordCountArgs";
import { AnalyticsRecordFindManyArgs } from "./AnalyticsRecordFindManyArgs";
import { AnalyticsRecordFindUniqueArgs } from "./AnalyticsRecordFindUniqueArgs";
import { CreateAnalyticsRecordArgs } from "./CreateAnalyticsRecordArgs";
import { UpdateAnalyticsRecordArgs } from "./UpdateAnalyticsRecordArgs";
import { DeleteAnalyticsRecordArgs } from "./DeleteAnalyticsRecordArgs";
import { AnalyticsRecordService } from "../analyticsRecord.service";
@graphql.Resolver(() => AnalyticsRecord)
export class AnalyticsRecordResolverBase {
  constructor(protected readonly service: AnalyticsRecordService) {}

  async _analyticsRecordsMeta(
    @graphql.Args() args: AnalyticsRecordCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AnalyticsRecord])
  async analyticsRecords(
    @graphql.Args() args: AnalyticsRecordFindManyArgs
  ): Promise<AnalyticsRecord[]> {
    return this.service.analyticsRecords(args);
  }

  @graphql.Query(() => AnalyticsRecord, { nullable: true })
  async analyticsRecord(
    @graphql.Args() args: AnalyticsRecordFindUniqueArgs
  ): Promise<AnalyticsRecord | null> {
    const result = await this.service.analyticsRecord(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AnalyticsRecord)
  async createAnalyticsRecord(
    @graphql.Args() args: CreateAnalyticsRecordArgs
  ): Promise<AnalyticsRecord> {
    return await this.service.createAnalyticsRecord({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AnalyticsRecord)
  async updateAnalyticsRecord(
    @graphql.Args() args: UpdateAnalyticsRecordArgs
  ): Promise<AnalyticsRecord | null> {
    try {
      return await this.service.updateAnalyticsRecord({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AnalyticsRecord)
  async deleteAnalyticsRecord(
    @graphql.Args() args: DeleteAnalyticsRecordArgs
  ): Promise<AnalyticsRecord | null> {
    try {
      return await this.service.deleteAnalyticsRecord(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
