/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserActionService } from "../userAction.service";
import { UserActionCreateInput } from "./UserActionCreateInput";
import { UserAction } from "./UserAction";
import { UserActionFindManyArgs } from "./UserActionFindManyArgs";
import { UserActionWhereUniqueInput } from "./UserActionWhereUniqueInput";
import { UserActionUpdateInput } from "./UserActionUpdateInput";

export class UserActionControllerBase {
  constructor(protected readonly service: UserActionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserAction })
  async createUserAction(
    @common.Body() data: UserActionCreateInput
  ): Promise<UserAction> {
    return await this.service.createUserAction({
      data: data,
      select: {
        action: true,
        createdAt: true,
        id: true,
        postId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserAction] })
  @ApiNestedQuery(UserActionFindManyArgs)
  async userActions(@common.Req() request: Request): Promise<UserAction[]> {
    const args = plainToClass(UserActionFindManyArgs, request.query);
    return this.service.userActions({
      ...args,
      select: {
        action: true,
        createdAt: true,
        id: true,
        postId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserAction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userAction(
    @common.Param() params: UserActionWhereUniqueInput
  ): Promise<UserAction | null> {
    const result = await this.service.userAction({
      where: params,
      select: {
        action: true,
        createdAt: true,
        id: true,
        postId: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserAction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserAction(
    @common.Param() params: UserActionWhereUniqueInput,
    @common.Body() data: UserActionUpdateInput
  ): Promise<UserAction | null> {
    try {
      return await this.service.updateUserAction({
        where: params,
        data: data,
        select: {
          action: true,
          createdAt: true,
          id: true,
          postId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserAction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserAction(
    @common.Param() params: UserActionWhereUniqueInput
  ): Promise<UserAction | null> {
    try {
      return await this.service.deleteUserAction({
        where: params,
        select: {
          action: true,
          createdAt: true,
          id: true,
          postId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
